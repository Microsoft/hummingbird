# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2019]
        python-version: [3.5, 3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install pytorch for mac
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        pip install torch
    - name: Install pytorch 1.5.1+cpu if python 3.5 (not mac)
      if: ${{ matrix.python-version == '3.5' && matrix.os != 'macos-latest' }}
      run: |
        pip install torch==1.5.1+cpu -f https://download.pytorch.org/whl/torch_stable.html
    - name: Install pytorch 1.6.0+cpu if python > 3.5 (not mac)
      if:  ${{ matrix.python-version != '3.5' && matrix.os != 'macos-latest' }}
      run: |
        pip install torch==1.6.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
    - name: Install basic dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[tests] -f https://download.pytorch.org/whl/torch_stable.html
        pip install decorator attrs tornado
    - name: Run basic tests without extra
      run: |
        pytest
    - name: Coverage on basic tests without extra
      run: |
        coverage run -a -m pytest tests/test_no_extra_install.py
    - name: If mac, install libomp to facilitate lgbm install
      if: matrix.os == 'macOS-latest'
      run: |
        brew install libomp
        export CC=/usr/bin/clang
        export CXX=/usr/bin/clang++
        export CPPFLAGS="$CPPFLAGS -Xpreprocessor -fopenmp"
        export CFLAGS="$CFLAGS -I/usr/local/opt/libomp/include"
        export CXXFLAGS="$CXXFLAGS -I/usr/local/opt/libomp/include"
        export LDFLAGS="$LDFLAGS -Wl,-rpath,/usr/local/opt/libomp/lib -L/usr/local/opt/libomp/lib -lomp"
    - name: Install extra dependencies
      run: |
        pip install .[extra,onnx,sparkml]
        pip install pandas
    - name: Fetch TVM
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd ~/
        git clone https://github.com/apache/incubator-tvm.git
        cd incubator-tvm
        git submodule update --recursive --init
        cmake -E make_directory build
    # - name: CMake TVM on Windows
    #   if: matrix.os == 'windows-2019'
    #   working-directory: incubator-tvm/build.common
    #   run: >-
    #     cmake
    #     -DUSE_SORT=ON
    #     -DUSE_RPC=ON
    #     -DUSE_GRAPH_RUNTIME=ON
    #     -DCMAKE_BUILD_TYPE=Release
    #     -DCMAKE_CONFIGURATION_TYPES="Release"
    #     ..
    - name: CMake TVM on Mac
      if: matrix.os == 'ubuntu-latest'
      working-directory: ../../../incubator-tvm/build
      run: >-
        cmake
        "-DUSE_RPC=ON"
        "-DUSE_GRAPH_RUNTIME=ON"
        ..
    # - name: Build TVM on Windows
    #   if: matrix.os == 'windows-2019'
    #   working-directory: incubator-tvm
    #   run: cmake --build build.common --config Release -- /m
    - name: Build TVM on Unix
      if: matrix.os == 'ubuntu-latest'
      working-directory: ../../../incubator-tvm/build
      run: |
        make -j3
    #    export TVM_HOME=$HOME/incubator-tvm
    # export PYTHONPATH=$TVM_HOME/python
    - name: Install python TVM
      if: matrix.os == 'ubuntu-latest'
      working-directory: ../../../incubator-tvm/python
      run: |
        export TVM_HOME=/home/runner/incubator-tvm/
        python setup.py install
    # - name: Test TVM
    #   if: matrix.os == 'ubuntu-latest'
    #   run: |
    #     gdb python tests/test_extra_conf.py
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # The GitHub editor is 127 chars wide
        flake8 . --count  --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Coverage
      # run and push coverage only on one of the runs
      if: ${{ matrix.python-version == '3.7' && matrix.os == 'ubuntu-latest' }}
      run: |
        coverage run -a -m pytest tests
        coverage xml
    - name: Upload coverage to Codecov
      if: ${{ matrix.python-version == '3.7' && matrix.os == 'ubuntu-latest' }}
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        flags: unittests
    - name: Generate Documentation   # for some awful reason, this only works with older torch????
      if: ${{ matrix.python-version == '3.7' && matrix.os == 'ubuntu-latest' }}
      run: |
        make sphinx-site -C website/
    - name: Deploy to GitHub pages
      if: ${{ github.ref == 'refs/heads/master' && matrix.python-version == '3.7' && matrix.os == 'ubuntu-latest' }}
      uses: JamesIves/github-pages-deploy-action@3.6.2
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages
        FOLDER: website/public
